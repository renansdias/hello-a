def label = "worker-${UUID.randomUUID().toString()}"

def checkoutCurrentRepo() {
    def vars = checkout scm

    return vars
}

def extractAppsToDeploy(String fileChanges) {
    def files = fileChanges.split(',')
    def applications = []

    files.each { file ->
        def path = "${file}".split('/')

        if (path.length > 3) { // If there are only 3 parts, the file modified doesnt belong to a project
            for (i = 0; i < path.length; i++) {
                if (i + 1 <= path.length) { // not the last item
                    if (path[i] == "components") {
                        applications.push(path[i + 1])
                    }
                }
            }
        }
    }

    return applications.unique()
}

podTemplate(label: label, containers: [
  containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true)
],
volumes: [
  hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')
]) {
    node(label) {
        def scmVars
        def uniqueApplications

        stage('Checkout Repo') {
            scmVars = checkoutCurrentRepo() 

            println "${scmVars}"
        }

        stage('Extract Apps to Build') {
            env.GIT_COMMIT = scmVars.GIT_COMMIT
            def filesChanged = sh(script: "git show --pretty=\"\" --name-only \${GIT_COMMIT} | tr '\r\n' ',' | sed 's/.\$//'", returnStdout: true)
            
            uniqueApplications = extractAppsToDeploy(filesChanged)

            println "${uniqueApplications}"
        }

        // stage('Build images') {
        //     uniqueApplications.each { app ->
        //           container('docker') {
        //             withCredentials([[$class: 'UsernamePasswordMultiBinding',
        //             credentialsId: 'dockerhub',
        //             usernameVariable: 'DOCKER_HUB_USER',
        //             passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
        //             sh """
        //                 docker login -u ${DOCKER_HUB_USER} -p ${DOCKER_HUB_PASSWORD}
        //                 docker build -t tgam/${app}:test platform/components/${app}
        //                 """
        //             }
        //         }
        //     }
        // }
    }
}